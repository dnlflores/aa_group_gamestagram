{"ast":null,"code":"const ADD_COMMENT = \"comment/ADD_COMMENT\";\nconst LOAD_COMMENTS = \"comment/LOAD_COMMENTS\";\n\nconst addComment = comment => ({\n  type: ADD_COMMENT,\n  payload: comment\n});\n\nconst loadComments = comments => ({\n  type: LOAD_COMMENTS,\n  payload: comments\n});\n\nexport const createComment = (imageId, content) => async dispatch => {\n  const response = await fetch(`/api/games/${imageId}/comments`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      content\n    })\n  });\n\n  if (response.ok) {\n    const newComment = await response.json();\n    dispatch(addComment(newComment));\n    return newComment;\n  }\n};\nexport const getComments = comments => async dispatch => {\n  const response = await fetch(`/api/games/comments`);\n\n  if (response.ok) {\n    const loadedComments = await response.json();\n    console.log(\"THIS IS THE LOADED COMMENTS\", loadedComments);\n    dispatch(loadComments(loadedComments));\n    return loadedComments;\n  }\n};\nexport default function commentReducer(state = {}, action) {\n  var _action$payload$comme;\n\n  switch (action.type) {\n    case ADD_COMMENT:\n      const newState = { ...state,\n        [action.payload.id]: action.payload\n      };\n      return newState;\n\n    case LOAD_COMMENTS:\n      const loadState = { ...state\n      };\n      (_action$payload$comme = action.payload.comments) === null || _action$payload$comme === void 0 ? void 0 : _action$payload$comme.forEach(comment => loadState[comment.id] = comment);\n      return loadState;\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/Users/jaredburnett/Desktop/builds/aa_group_gamestagram/react-app/src/store/comment.js"],"names":["ADD_COMMENT","LOAD_COMMENTS","addComment","comment","type","payload","loadComments","comments","createComment","imageId","content","dispatch","response","fetch","method","headers","body","JSON","stringify","ok","newComment","json","getComments","loadedComments","console","log","commentReducer","state","action","newState","id","loadState","forEach"],"mappings":"AAAA,MAAMA,WAAW,GAAG,qBAApB;AACA,MAAMC,aAAa,GAAG,uBAAtB;;AAEA,MAAMC,UAAU,GAAIC,OAAD,KAAc;AAC/BC,EAAAA,IAAI,EAAEJ,WADyB;AAE/BK,EAAAA,OAAO,EAAEF;AAFsB,CAAd,CAAnB;;AAKA,MAAMG,YAAY,GAAGC,QAAQ,KAAK;AAChCH,EAAAA,IAAI,EAAEH,aAD0B;AAEhCI,EAAAA,OAAO,EAAEE;AAFuB,CAAL,CAA7B;;AAKA,OAAO,MAAMC,aAAa,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB,MAAOC,QAAP,IAAoB;AACrE,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,cAAaJ,OAAQ,WAAvB,EAAmC;AAC7DK,IAAAA,MAAM,EAAE,MADqD;AAE7DC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFoD;AAG7DC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAER,MAAAA;AAAF,KAAf;AAHuD,GAAnC,CAA5B;;AAKA,MAAIE,QAAQ,CAACO,EAAb,EAAiB;AACf,UAAMC,UAAU,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAAzB;AACAV,IAAAA,QAAQ,CAACT,UAAU,CAACkB,UAAD,CAAX,CAAR;AACA,WAAOA,UAAP;AACD;AACF,CAXM;AAaP,OAAO,MAAME,WAAW,GAAGf,QAAQ,IAAI,MAAMI,QAAN,IAAkB;AACvD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,qBAAF,CAA5B;;AACA,MAAGD,QAAQ,CAACO,EAAZ,EAAgB;AACd,UAAMI,cAAc,GAAG,MAAMX,QAAQ,CAACS,IAAT,EAA7B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CF,cAA3C;AACAZ,IAAAA,QAAQ,CAACL,YAAY,CAACiB,cAAD,CAAb,CAAR;AACA,WAAOA,cAAP;AACD;AACF,CARM;AAUP,eAAe,SAASG,cAAT,CAAwBC,KAAK,GAAG,EAAhC,EAAoCC,MAApC,EAA4C;AAAA;;AACzD,UAAQA,MAAM,CAACxB,IAAf;AACE,SAAKJ,WAAL;AACE,YAAM6B,QAAQ,GAAG,EAAE,GAAGF,KAAL;AAAY,SAACC,MAAM,CAACvB,OAAP,CAAeyB,EAAhB,GAAqBF,MAAM,CAACvB;AAAxC,OAAjB;AACA,aAAOwB,QAAP;;AACF,SAAK5B,aAAL;AACE,YAAM8B,SAAS,GAAG,EAAC,GAAGJ;AAAJ,OAAlB;AACA,+BAAAC,MAAM,CAACvB,OAAP,CAAeE,QAAf,gFAAyByB,OAAzB,CAAiC7B,OAAO,IAAI4B,SAAS,CAAC5B,OAAO,CAAC2B,EAAT,CAAT,GAAwB3B,OAApE;AACA,aAAO4B,SAAP;;AACF;AAAS;AACP,eAAOJ,KAAP;AACD;AAVH;AAYD","sourcesContent":["const ADD_COMMENT = \"comment/ADD_COMMENT\";\nconst LOAD_COMMENTS = \"comment/LOAD_COMMENTS\";\n\nconst addComment = (comment) => ({\n  type: ADD_COMMENT,\n  payload: comment,\n});\n\nconst loadComments = comments => ({\n  type: LOAD_COMMENTS,\n  payload: comments\n})\n\nexport const createComment = (imageId, content) => async (dispatch) => {\n  const response = await fetch(`/api/games/${imageId}/comments`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ content }),\n  });\n  if (response.ok) {\n    const newComment = await response.json();\n    dispatch(addComment(newComment));\n    return newComment;\n  }\n};\n\nexport const getComments = comments => async dispatch => {\n  const response = await fetch(`/api/games/comments`);\n  if(response.ok) {\n    const loadedComments = await response.json();\n    console.log(\"THIS IS THE LOADED COMMENTS\", loadedComments)\n    dispatch(loadComments(loadedComments));\n    return loadedComments;\n  }\n}\n\nexport default function commentReducer(state = {}, action) {\n  switch (action.type) {\n    case ADD_COMMENT: \n      const newState = { ...state, [action.payload.id]: action.payload };\n      return newState;\n    case LOAD_COMMENTS:\n      const loadState = {...state}\n      action.payload.comments?.forEach(comment => loadState[comment.id] = comment);\n      return loadState\n    default: {\n      return state;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}