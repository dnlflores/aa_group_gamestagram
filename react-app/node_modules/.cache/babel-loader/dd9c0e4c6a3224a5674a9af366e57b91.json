{"ast":null,"code":"const LOAD_IMAGES = 'images/LOAD_IMAGES';\nconst DELETE_IMAGE = 'image'; // const SET_IMAGE = 'images/SET_IMAGE';\n\nconst loadImages = images => ({\n  type: LOAD_IMAGES,\n  payload: images\n});\n\nexport const getImages = () => async dispatch => {\n  const response = await fetch('/api/games');\n\n  if (response.ok) {\n    const images = await response.json();\n    dispatch(loadImages(images)); // return images\n  } else return;\n};\nexport default function imageReducer(state = {}, action) {\n  var _action$payload$image;\n\n  switch (action.type) {\n    case LOAD_IMAGES:\n      const newState = {};\n      (_action$payload$image = action.payload.images) === null || _action$payload$image === void 0 ? void 0 : _action$payload$image.forEach(image => newState[image.id] = image);\n      return newState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/jaredburnett/Desktop/builds/aa_group_gamestagram/react-app/src/store/image.js"],"names":["LOAD_IMAGES","DELETE_IMAGE","loadImages","images","type","payload","getImages","dispatch","response","fetch","ok","json","imageReducer","state","action","newState","forEach","image","id"],"mappings":"AAAA,MAAMA,WAAW,GAAG,oBAApB;AACA,MAAMC,YAAY,GAAG,OAArB,C,CACA;;AAEA,MAAMC,UAAU,GAAIC,MAAD,KAAa;AAC5BC,EAAAA,IAAI,EAAEJ,WADsB;AAE5BK,EAAAA,OAAO,EAAEF;AAFmB,CAAb,CAAnB;;AAKA,OAAO,MAAMG,SAAS,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAC/C,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAD,CAA5B;;AACA,MAAID,QAAQ,CAACE,EAAb,EAAiB;AACb,UAAMP,MAAM,GAAG,MAAMK,QAAQ,CAACG,IAAT,EAArB;AACAJ,IAAAA,QAAQ,CAACL,UAAU,CAACC,MAAD,CAAX,CAAR,CAFa,CAGb;AAEH,GALD,MAKO;AAEV,CATM;AAWP,eAAe,SAASS,YAAT,CAAsBC,KAAK,GAAG,EAA9B,EAAkCC,MAAlC,EAA0C;AAAA;;AACrD,UAAQA,MAAM,CAACV,IAAf;AACI,SAAKJ,WAAL;AACI,YAAMe,QAAQ,GAAG,EAAjB;AACA,+BAAAD,MAAM,CAACT,OAAP,CAAeF,MAAf,gFAAuBa,OAAvB,CAA+BC,KAAK,IAAIF,QAAQ,CAACE,KAAK,CAACC,EAAP,CAAR,GAAqBD,KAA7D;AACA,aAAOF,QAAP;;AACJ;AACI,aAAOF,KAAP;AANR;AAQH","sourcesContent":["const LOAD_IMAGES = 'images/LOAD_IMAGES';\nconst DELETE_IMAGE = 'image'\n// const SET_IMAGE = 'images/SET_IMAGE';\n\nconst loadImages = (images) => ({\n    type: LOAD_IMAGES,\n    payload: images\n})\n\nexport const getImages = () => async (dispatch) => {\n    const response = await fetch('/api/games')\n    if (response.ok) {\n        const images = await response.json();\n        dispatch(loadImages(images));\n        // return images\n\n    } else return;\n\n}\n\nexport default function imageReducer(state = {}, action) {\n    switch (action.type) {\n        case LOAD_IMAGES:\n            const newState = {}\n            action.payload.images?.forEach(image => newState[image.id] = image)\n            return newState\n        default:\n            return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}