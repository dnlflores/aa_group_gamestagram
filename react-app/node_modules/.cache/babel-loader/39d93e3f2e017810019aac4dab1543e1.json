{"ast":null,"code":"var _jsxFileName = \"/Users/jaredburnett/Desktop/builds/aa_group_gamestagram/react-app/src/components/CreateImagePage/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreateImagePage = () => {\n  _s();\n\n  const history = useHistory(); // so that we can redirect after the image upload is successful\n\n  const [errors, setErrors] = useState([]);\n  const [image, setImage] = useState(null);\n  const [imageLoading, setImageLoading] = useState(false);\n  const [caption, setCaption] = useState('');\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append(\"image\", image); // aws uploads can be a bit slow—displaying\n    // some sort of loading message is a good idea\n\n    setImageLoading(true);\n    formData.append(\"caption\", caption);\n    const res = await fetch('/api/games', {\n      method: \"POST\",\n      body: formData\n    });\n\n    if (res.ok) {\n      await res.json();\n      setImageLoading(false);\n      history.push(\"/games\");\n    } else {\n      setImageLoading(false); // a real app would probably use more advanced\n      // error handling\n\n      console.log(\"error\");\n    }\n  };\n\n  const updateImage = e => {\n    const file = e.target.files[0];\n    setImage(file);\n  };\n\n  const updateCaption = e => {\n    setCaption(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Caption\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"caption\",\n        onChange: updateCaption,\n        value: caption\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: updateImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), imageLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CreateImagePage, \"OT4X/KMnarRjAmTG6ns6uRNd8t0=\", false, function () {\n  return [useHistory];\n});\n\n_c = CreateImagePage;\nexport default CreateImagePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateImagePage\");","map":{"version":3,"sources":["/Users/jaredburnett/Desktop/builds/aa_group_gamestagram/react-app/src/components/CreateImagePage/index.js"],"names":["React","useState","useHistory","CreateImagePage","history","errors","setErrors","image","setImage","imageLoading","setImageLoading","caption","setCaption","handleSubmit","e","preventDefault","formData","FormData","append","res","fetch","method","body","ok","json","push","console","log","updateImage","file","target","files","updateCaption","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,UAAT,QAA2B,kBAA3B;;;AAGA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC1B,QAAMC,OAAO,GAAGF,UAAU,EAA1B,CAD0B,CACI;;AAC9B,QAAM,CAACG,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;;AAGA,QAAMY,YAAY,GAAG,MAAOC,CAAP,IAAa;AAC9BA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBX,KAAzB,EAH8B,CAK9B;AACA;;AACAG,IAAAA,eAAe,CAAC,IAAD,CAAf;AAEAM,IAAAA,QAAQ,CAACE,MAAT,CAAgB,SAAhB,EAA2BP,OAA3B;AAEA,UAAMQ,GAAG,GAAG,MAAMC,KAAK,CAAC,YAAD,EAAe;AAClCC,MAAAA,MAAM,EAAE,MAD0B;AAElCC,MAAAA,IAAI,EAAEN;AAF4B,KAAf,CAAvB;;AAIA,QAAIG,GAAG,CAACI,EAAR,EAAY;AACR,YAAMJ,GAAG,CAACK,IAAJ,EAAN;AACAd,MAAAA,eAAe,CAAC,KAAD,CAAf;AACAN,MAAAA,OAAO,CAACqB,IAAR,CAAa,QAAb;AACH,KAJD,MAKK;AACDf,MAAAA,eAAe,CAAC,KAAD,CAAf,CADC,CAED;AACA;;AACAgB,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AACJ,GA1BD;;AA4BA,QAAMC,WAAW,GAAId,CAAD,IAAO;AACvB,UAAMe,IAAI,GAAGf,CAAC,CAACgB,MAAF,CAASC,KAAT,CAAe,CAAf,CAAb;AACAvB,IAAAA,QAAQ,CAACqB,IAAD,CAAR;AACH,GAHD;;AAKA,QAAMG,aAAa,GAAIlB,CAAD,IAAO;AACzBF,IAAAA,UAAU,CAACE,CAAC,CAACgB,MAAF,CAASG,KAAV,CAAV;AACD,GAFH;;AAIA,sBACI;AAAM,IAAA,QAAQ,EAAEpB,YAAhB;AAAA,4BACI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AACQ,QAAA,IAAI,EAAC,SADb;AAEQ,QAAA,QAAQ,EAAEmB,aAFlB;AAGQ,QAAA,KAAK,EAAErB;AAHf;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eASI;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,MAAM,EAAC,SAFT;AAGE,MAAA,QAAQ,EAAEiB;AAHZ;AAAA;AAAA;AAAA;AAAA,YATJ,eAcI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdJ,EAeMnB,YAAD,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAftB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH,CAhED;;GAAMN,e;UACcD,U;;;KADdC,e;AAkEN,eAAeA,eAAf","sourcesContent":["import React, {useState} from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\n\nconst CreateImagePage = () => {\n    const history = useHistory(); // so that we can redirect after the image upload is successful\n    const [errors, setErrors] = useState([]);\n    const [image, setImage] = useState(null);\n    const [imageLoading, setImageLoading] = useState(false);\n    const [caption, setCaption] = useState('');\n    \n    \n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const formData = new FormData();\n        formData.append(\"image\", image);\n        \n        // aws uploads can be a bit slow—displaying\n        // some sort of loading message is a good idea\n        setImageLoading(true);\n\n        formData.append(\"caption\", caption)\n\n        const res = await fetch('/api/games', {\n            method: \"POST\",\n            body: formData,\n        });\n        if (res.ok) {\n            await res.json();\n            setImageLoading(false);\n            history.push(\"/games\");\n        }\n        else {\n            setImageLoading(false);\n            // a real app would probably use more advanced\n            // error handling\n            console.log(\"error\");\n        }\n    }\n    \n    const updateImage = (e) => {\n        const file = e.target.files[0];\n        setImage(file);\n    }\n\n    const updateCaption = (e) => {\n        setCaption(e.target.value);\n      };\n    \n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <label>Caption</label>\n                <input type='text'\n                        name='caption'\n                        onChange={updateCaption}\n                        value={caption}\n                        ></input>\n            </div>\n            <input\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={updateImage}\n            />\n            <button type=\"submit\">Submit</button>\n            {(imageLoading)&& <p>Loading...</p>}\n        </form>\n    )\n}\n\nexport default CreateImagePage;"]},"metadata":{},"sourceType":"module"}