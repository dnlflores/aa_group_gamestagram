{"ast":null,"code":"var _jsxFileName = \"/Users/jaredburnett/Desktop/builds/aa_group_gamestagram/react-app/src/components/CreateImagePage/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport NavBar from \"../Navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CreateImagePage = () => {\n  _s();\n\n  const history = useHistory(); // so that we can redirect after the image upload is successful\n\n  const [errors, setErrors] = useState([]);\n  const [image, setImage] = useState(null);\n  const [imageLoading, setImageLoading] = useState(false);\n  const [caption, setCaption] = useState(\"\");\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append(\"image\", image); // aws uploads can be a bit slow—displaying\n    // some sort of loading message is a good idea\n\n    setImageLoading(true);\n    formData.append(\"caption\", caption);\n    const res = await fetch(\"/api/games\", {\n      method: \"POST\",\n      body: formData\n    });\n\n    if (res.ok) {\n      await res.json();\n      setImageLoading(false);\n      history.push(\"/games\");\n    } else {\n      setImageLoading(false); // a real app would probably use more advanced\n      // error handling\n\n      console.log(\"there was an error here is some info\", res, res.formData, res.status);\n    }\n  };\n\n  const updateImage = e => {\n    const file = e.target.files[0];\n    setImage(file);\n  };\n\n  const updateCaption = e => {\n    setCaption(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Caption\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"caption\",\n          onChange: updateCaption,\n          value: caption\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: updateImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), imageLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CreateImagePage, \"Q/X1UKLDP6mhztPUBs9VhFkjhp4=\", false, function () {\n  return [useHistory];\n});\n\n_c = CreateImagePage;\nexport default CreateImagePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateImagePage\");","map":{"version":3,"sources":["/Users/jaredburnett/Desktop/builds/aa_group_gamestagram/react-app/src/components/CreateImagePage/index.js"],"names":["React","useState","useHistory","NavBar","CreateImagePage","history","errors","setErrors","image","setImage","imageLoading","setImageLoading","caption","setCaption","handleSubmit","e","preventDefault","formData","FormData","append","res","fetch","method","body","ok","json","push","console","log","status","updateImage","file","target","files","updateCaption","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport NavBar from \"../Navbar\";\n\nconst CreateImagePage = () => {\n  const history = useHistory(); // so that we can redirect after the image upload is successful\n  const [errors, setErrors] = useState([]);\n  const [image, setImage] = useState(null);\n  const [imageLoading, setImageLoading] = useState(false);\n  const [caption, setCaption] = useState(\"\");\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append(\"image\", image);\n\n    // aws uploads can be a bit slow—displaying\n    // some sort of loading message is a good idea\n    setImageLoading(true);\n\n    formData.append(\"caption\", caption);\n\n    const res = await fetch(\"/api/games\", {\n      method: \"POST\",\n      body: formData,\n    });\n    if (res.ok) {\n      await res.json();\n      setImageLoading(false);\n      history.push(\"/games\");\n    } else {\n      setImageLoading(false);\n      // a real app would probably use more advanced\n      // error handling\n      console.log(\"there was an error here is some info\", res, res.formData, res.status);\n    }\n  };\n\n  const updateImage = (e) => {\n    const file = e.target.files[0];\n    setImage(file);\n  };\n\n  const updateCaption = (e) => {\n    setCaption(e.target.value);\n  };\n\n  return (\n    <>\n      <NavBar />\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>Caption</label>\n          <input\n            type=\"text\"\n            name=\"caption\"\n            onChange={updateCaption}\n            value={caption}\n          ></input>\n        </div>\n        <input type=\"file\" accept=\"image/*\" onChange={updateImage} />\n        <button type=\"submit\">Submit</button>\n        {imageLoading && <p>Loading...</p>}\n      </form>\n    </>\n  );\n};\n\nexport default CreateImagePage;\n"]},"metadata":{},"sourceType":"module"}