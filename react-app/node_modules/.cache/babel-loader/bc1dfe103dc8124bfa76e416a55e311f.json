{"ast":null,"code":"const ADD_COMMENT = \"comment/ADD_COMMENT\";\nconst LOAD_COMMENTS = \"comment/LOAD_COMMENTS\";\nconst EDIT_COMMENT = \"comment/EDIT_COMMENT\";\nconst DELETE_COMMENT = \"comment/DELETE_COMMENT\";\n\nconst addComment = comment => ({\n  type: ADD_COMMENT,\n  payload: comment\n});\n\nconst loadComments = comments => ({\n  type: LOAD_COMMENTS,\n  payload: comments\n});\n\nconst editComment = comment => ({\n  type: EDIT_COMMENT,\n  payload: comment\n});\n\nconst deleteComment = comment => ({\n  type: DELETE_COMMENT,\n  payload: comment\n});\n\nexport const createComment = (imageId, content) => async dispatch => {\n  const response = await fetch(`/api/games/${imageId}/comments`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      content\n    })\n  });\n\n  if (response.ok) {\n    const newComment = await response.json();\n    dispatch(addComment(newComment));\n    return newComment;\n  }\n};\nexport const getComments = () => async dispatch => {\n  const response = await fetch(`/api/games/comments`);\n\n  if (response.ok) {\n    const loadedComments = await response.json();\n    console.log(\"THIS IS THE LOADED COMMENTS\", loadedComments);\n    dispatch(loadComments(loadedComments));\n    return loadedComments;\n  }\n};\nexport const editOneComment = (image_id, comment_id, content) => async dispatch => {\n  const response = await fetch(`/api/games/${image_id}/comments/${comment_id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      content\n    })\n  });\n\n  if (response.ok) {\n    console.log('response was ok');\n    const newComment = await response.json();\n    dispatch(editComment(newComment));\n    return newComment;\n  }\n};\nexport const deleteOneComment = (image_id, comment_id) => async dispatch => {\n  const response = await fetch(`/api/games/${image_id}/comments/${comment_id}`, {\n    method: \"DELETE\"\n  });\n\n  if (response.ok) {\n    const deletedComment = await response.json();\n    dispatch(deleteComment(deletedComment));\n    return deletedComment;\n  }\n};\nexport default function commentReducer(state = {}, action) {\n  var _action$payload$comme;\n\n  switch (action.type) {\n    case ADD_COMMENT:\n      const newState = { ...state,\n        [action.payload.id]: action.payload\n      };\n      return newState;\n\n    case LOAD_COMMENTS:\n      const loadState = { ...state\n      };\n      (_action$payload$comme = action.payload.comments) === null || _action$payload$comme === void 0 ? void 0 : _action$payload$comme.forEach(comment => loadState[comment.id] = comment);\n      return loadState;\n\n    case EDIT_COMMENT:\n      const editState = { ...state\n      };\n      editState[action.payload.id] = action.payload;\n      return editState;\n\n    case DELETE_COMMENT:\n      const deleteState = { ...state\n      };\n      delete deleteState[action.payload.id];\n      return deleteState;\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/Users/jaredburnett/Desktop/builds/aa_group_gamestagram/react-app/src/store/comment.js"],"names":["ADD_COMMENT","LOAD_COMMENTS","EDIT_COMMENT","DELETE_COMMENT","addComment","comment","type","payload","loadComments","comments","editComment","deleteComment","createComment","imageId","content","dispatch","response","fetch","method","headers","body","JSON","stringify","ok","newComment","json","getComments","loadedComments","console","log","editOneComment","image_id","comment_id","deleteOneComment","deletedComment","commentReducer","state","action","newState","id","loadState","forEach","editState","deleteState"],"mappings":"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","sourcesContent":["const ADD_COMMENT = \"comment/ADD_COMMENT\";\nconst LOAD_COMMENTS = \"comment/LOAD_COMMENTS\";\nconst EDIT_COMMENT = \"comment/EDIT_COMMENT\";\nconst DELETE_COMMENT = \"comment/DELETE_COMMENT\";\n\nconst addComment = (comment) => ({\n  type: ADD_COMMENT,\n  payload: comment,\n});\n\nconst loadComments = comments => ({\n  type: LOAD_COMMENTS,\n  payload: comments,\n})\n\nconst editComment = comment => ({\n  type: EDIT_COMMENT,\n  payload: comment,\n})\n\nconst deleteComment = comment => ({\n  type: DELETE_COMMENT,\n  payload: comment,\n})\n\nexport const createComment = (imageId, content) => async (dispatch) => {\n  const response = await fetch(`/api/games/${imageId}/comments`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ content }),\n  });\n  if (response.ok) {\n    const newComment = await response.json();\n    dispatch(addComment(newComment));\n    return newComment;\n  }\n};\n\nexport const getComments = () => async dispatch => {\n  const response = await fetch(`/api/games/comments`);\n  if(response.ok) {\n    const loadedComments = await response.json();\n    console.log(\"THIS IS THE LOADED COMMENTS\", loadedComments)\n    dispatch(loadComments(loadedComments));\n    return loadedComments;\n  }\n}\n\nexport const editOneComment = (image_id, comment_id, content) => async dispatch => {\n  const response = await fetch(`/api/games/${image_id}/comments/${comment_id}`, {\n    method: \"PUT\",\n    headers: {\"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ content })\n  })\n  if (response.ok) {\n    console.log('response was ok')\n    const newComment = await response.json();\n    dispatch(editComment(newComment));\n    return newComment;\n  }\n\n}\n\nexport const deleteOneComment = (image_id, comment_id) => async dispatch => {\n  const response = await fetch(`/api/games/${image_id}/comments/${comment_id}`, {\n    method: \"DELETE\"\n  })\n  if (response.ok) {\n    const deletedComment = await response.json();\n    dispatch(deleteComment(deletedComment));\n    return deletedComment\n  }\n}\n\nexport default function commentReducer(state = {}, action) {\n  switch (action.type) {\n    case ADD_COMMENT: \n      const newState = { ...state, [action.payload.id]: action.payload };\n      return newState;\n    case LOAD_COMMENTS:\n      const loadState = {...state}\n      action.payload.comments?.forEach(comment => loadState[comment.id] = comment);\n      return loadState\n    case EDIT_COMMENT:\n      const editState = {...state};\n      editState[action.payload.id] = action.payload;\n      return editState\n    case DELETE_COMMENT:\n      const deleteState = {...state};\n      delete deleteState[action.payload.id];\n      return deleteState;\n    default: {\n      return state;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}